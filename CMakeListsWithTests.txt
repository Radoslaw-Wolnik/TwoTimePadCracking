cmake_minimum_required(VERSION 3.15)
project(TwoTimePadCracker VERSION 1.0.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Options
option(BUILD_TESTS "Build the tests" ON)
option(USE_GPU "Enable GPU acceleration" OFF)

# Find required packages
find_package(Threads REQUIRED)
find_package(Boost REQUIRED COMPONENTS graph)
find_package(yaml-cpp REQUIRED)
find_package(cxxopts REQUIRED)
find_package(OpenCL REQUIRED)
find_package(GTest REQUIRED)

# Add include directories
include_directories(${PROJECT_SOURCE_DIR}/src)
include_directories(${Boost_INCLUDE_DIRS})

# Add source files
set(SOURCES
    src/language_model.cpp
    src/decryptor.cpp
    src/viterbi_search.cpp
    src/model_analyzer.cpp
    src/visualizer.cpp
    src/viterbi_visualizer.cpp
    src/config_manager.cpp
    src/logger.cpp
    src/gpu_accelerator.cpp
    src/main.cpp
)

# Create executable
add_executable(two_time_pad_cracker ${SOURCES})

# Link libraries
target_link_libraries(two_time_pad_cracker
    PRIVATE
    Threads::Threads
    Boost::graph
    yaml-cpp
    cxxopts::cxxopts
    OpenCL::OpenCL
)

if(USE_GPU)
    target_compile_definitions(two_time_pad_cracker PRIVATE USE_GPU)
endif()

# Enable warnings
if(MSVC)
    target_compile_options(two_time_pad_cracker PRIVATE /W4 /WX)
else()
    target_compile_options(two_time_pad_cracker PRIVATE -Wall -Wextra -Wpedantic -Werror)
endif()

# Tests
if(BUILD_TESTS)
    enable_testing()
    add_executable(unit_tests
        test/src/main_test.cpp
        test/src/test_language_model.cpp
        test/src/test_viterbi_search.cpp
        test/src/test_decryptor.cpp
        test/src/test_config_manager.cpp
        test/src/test_gpu_accelerator.cpp
        test/src/test_visualizer.cpp
    )
    target_include_directories(unit_tests
        PRIVATE
        ${PROJECT_SOURCE_DIR}/include
        ${PROJECT_SOURCE_DIR}/test/include
    )
    target_link_libraries(unit_tests
        PRIVATE
        GTest::GTest
        GTest::Main
        Threads::Threads
        Boost::graph
        yaml-cpp
        OpenCL::OpenCL
    )
    add_test(NAME unit_tests COMMAND unit_tests)
endif()

# Installation
install(TARGETS two_time_pad_cracker DESTINATION bin)
install(FILES config.yaml DESTINATION etc)

# Packaging
set(CPACK_PACKAGE_NAME "TwoTimePadCracker")
set(CPACK_PACKAGE_VENDOR "Your Organization")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Two-Time Pad Cracker")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_INSTALL_DIRECTORY "TwoTimePadCracker")
include(CPack)